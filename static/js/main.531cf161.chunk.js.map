{"version":3,"sources":["images/pomodoro.img.png","components/BreakInterval.js","components/SessionLength.js","components/Timer.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","BreakInterval","props","className","disabled","isPlay","onClick","breakInterval","decreaseBreak","increaseBreak","SessionLength","sessionLength","decreaseSession","increaseSession","Timer","state","isSession","timerSecond","intervalID","play","bind","decreaseTimer","stop","reset","setInterval","this","onPlayStopTimer","setState","timerMinute","toggleInterval","updateTimerMinute","prevState","clearInterval","React","Component","App","breakLength","onIncreaseBreakLength","onDecreaseBreakLength","onIncreaseSessionLength","onDecreaseSessionLength","onToggleInterval","onUpdateTimerLimit","onResetTimer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.531cf161.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pomodoro.img.14bf5171.png\";","import React from 'react';\r\n\r\nfunction BreakInterval(props){\r\n    function decreaseCounter(){\r\n        if (props.breakInterval === 1){\r\n            return;\r\n        }\r\n        props.decreaseBreak();\r\n\r\n    }\r\n    function increaseCounter(){\r\n        if (props.breakInterval === 60){\r\n            return\r\n        }\r\n        props.increaseBreak();\r\n    }\r\n\r\n\r\n    return (\r\n       <section>\r\n           <h4>Break Session</h4>\r\n            <section className=\"interval-container\">\r\n                <button disabled={props.isPlay === true ? \"disabled\" : \"\"} onClick={decreaseCounter}>Down</button>\r\n                <p className=\"interval-counter\">{props.breakInterval}</p>\r\n                <button disabled={props.isPlay === true ? \"disabled\" : \"\"} onClick={increaseCounter}>Up</button> \r\n            </section>\r\n       </section> \r\n    );\r\n}\r\n\r\nexport default BreakInterval;","import React from 'react';\r\n\r\nfunction SessionLength(props){\r\n    function increaseSessionLength(){\r\n        if(props.sessionLength === 60){\r\n            return;\r\n        }\r\n        props.increaseSession();\r\n    }\r\n\r\n    function decreaseSessionLength(){\r\n        if(props.sessionLength === 1){\r\n            return;\r\n        }\r\n        props.decreaseSession();\r\n\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <h4>Session Length</h4>\r\n            <section className=\"interval-container\"> \r\n                <button disabled={props.isPlay === true ? \"disabled\" : \"\" } onClick={decreaseSessionLength}>Down</button>\r\n                <p className=\"interval-counter\">{props.sessionLength}</p>\r\n                <button disabled={props.isPlay === true ? \"disabled\" : \"\" } onClick={increaseSessionLength}>Up</button>\r\n            </section>         \r\n        </section> \r\n    );\r\n}\r\n\r\nexport default SessionLength;","\r\nimport React from 'react';\r\n\r\nclass Timer extends React.Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            isSession: true,\r\n            timerSecond: 0,\r\n            intervalID: 0,\r\n            isPlay: false\r\n        };\r\n        this.play = this.play.bind(this);\r\n        this.decreaseTimer = this.decreaseTimer.bind(this);\r\n        this.stop = this.stop.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n    }\r\n\r\n        play(){\r\n        let intervalID = setInterval(this.decreaseTimer,1000);\r\n        this.props.onPlayStopTimer(true);\r\n        this.setState({\r\n        intervalID: intervalID,\r\n        isPlay:true\r\n        });\r\n    }\r\n        decreaseTimer(){\r\n            switch(this.state.timerSecond){\r\n                case 0:\r\n                    if(this.props.timerMinute === 0){\r\n                        if(this.state.isSession){\r\n                            this.setState({\r\n                                isSession: false\r\n                                    });\r\n                                    this.props.toggleInterval(this.state.isSession);\r\n                                } else {\r\n                                    this.setState({\r\n                                        isSession: true\r\n                                    });\r\n                                    this.props.toggleInterval(this.state.isSession);\r\n                                }\r\n                                } else {\r\n                                this.props.updateTimerMinute()\r\n                                this.setState({\r\n                                    timerSecond: 59\r\n                                });\r\n                            }\r\n                    break;\r\n                default: \r\n                this.setState((prevState) => {\r\n                    return { timerSecond: prevState.timerSecond - 1\r\n                    }\r\n                });\r\n            break;\r\n            }\r\n        }\r\n        stop(){\r\n            clearInterval(this.state.intervalID);\r\n            this.props.onPlayStopTimer(false);\r\n           \r\n        }\r\n        reset(){\r\n            this.stop();\r\n            this.props.reset();\r\n            this.setState({\r\n                timerSecond: 0,\r\n                isSession: true,\r\n                isPlay: false\r\n            });\r\n\r\n        }\r\n     \r\n      \r\n    render() {\r\n        return (\r\n            <section > \r\n                <section className=\"timer-container\"> \r\n                    <h4>{this.state.isSession === true ? \"Session\" : \"break\"}</h4>\r\n                    <span className=\"timer\">{this.props.timerMinute}</span>  \r\n                    <span className=\"timer\">:</span>     \r\n                    <span className=\"timer\">{this.state.timerSecond === 0 ? \"00\" : this.state.timerSecond < 10 ? \"0\" + this.state.timerSecond : this.state.timerSecond}</span>     \r\n                </section>\r\n                <section className=\"timer-actions\">\r\n                    <button disabled={this.state.isPlay === true ? \"disabled\" : \"\" } onClick={this.play}>Play</button>\r\n                    <button onClick={this.stop}>Stop</button>\r\n                    <button onClick={this.reset}>Refresh</button>\r\n                </section>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Timer;","import React from 'react';\nimport '../App.css';\nimport BreakInterval from './BreakInterval';\nimport SessionLength from './SessionLength';\nimport Timer from './Timer';\nimport img from '../images/pomodoro.img.png';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      breakLength: 5,\n      sessionLength: 25,\n      timerMinute: 25,\n      isPlay: false\n     \n    };\n  this.onIncreaseBreakLength = this.onIncreaseBreakLength.bind(this);\n  this.onDecreaseBreakLength = this.onDecreaseBreakLength.bind(this);\n  this.onIncreaseSessionLength = this.onIncreaseSessionLength.bind(this);\n  this.onDecreaseSessionLength = this.onDecreaseSessionLength.bind(this);\n  this.onToggleInterval = this.onToggleInterval.bind(this);\n  this.onUpdateTimerLimit = this.onUpdateTimerLimit.bind(this);\n  this.onResetTimer = this.onResetTimer.bind(this);\n  this.onPlayStopTimer = this.onPlayStopTimer.bind(this);\n\n  }\n\n\n    onIncreaseBreakLength(){\n      this.setState((prevState) => {\n      return{\n        breakLength: prevState.breakLength + 1\n        }\n      });\n    }\n\n    onDecreaseBreakLength(){\n      this.setState((prevState) => {\n      return{\n        breakLength: prevState.breakLength - 1\n        }\n      });\n    }\n\n    onIncreaseSessionLength(){\n      this.setState((prevState) => {\n      return{\n        sessionLength: prevState.sessionLength + 1,\n        timerMinute: prevState.sessionLength + 1\n        }\n      });\n    }\n\n    onDecreaseSessionLength(){\n      this.setState((prevState) => {\n      return{\n        sessionLength: prevState.sessionLength - 1,\n        timerMinute: prevState.sessionLength - 1\n        }\n      });\n    }\n\n    onUpdateTimerLimit(){\n      this.setState((prevState) => {\n        return {\n          timerMinute: prevState.timerMinute - 1\n        }\n      });\n    }\n     \n    onToggleInterval(isSession){\n      if(isSession){\n        this.setState({\n          timerMinute: this.state.sessionLength\n        });\n      }\n      else {\n        this.setState({\n          timerMinute: this.state.breakLength\n        });\n      }\n    }\n\n    onResetTimer(){\n      this.setState({\n        timerMinute: this.state.sessionLength\n      });\n    }\n    onPlayStopTimer(isPlay){\n      this.setState({\n        isPlay: isPlay\n      });\n    }\n\n    render() {\n    return (\n      <div className=\"img-container\">\n      <main className=\"media\">\n          <h2>Pomodoro Clock</h2>\n          <section className = \"container-upper-two\"> \n          <BreakInterval  isPlay = {this.state.isPlay}\n                          breakInterval = {this.state.breakLength} \n                          increaseBreak = {this.onIncreaseBreakLength}\n                          decreaseBreak = {this.onDecreaseBreakLength}\n                         />\n          <SessionLength isPlay = {this.state.isPlay}\n                         sessionLength = {this.state.sessionLength}  \n                         increaseSession = {this.onIncreaseSessionLength}\n                         decreaseSession = {this.onDecreaseSessionLength}\n                          />\n        </section>\n          <Timer timerMinute = {this.state.timerMinute}\n                 breakLength = {this.state.breakLength}\n                 updateTimerMinute = {this.onUpdateTimerLimit}\n                 toggleInterval = {this.onToggleInterval} \n                 reset = {this.onResetTimer} \n                 onPlayStopTimer = {this.onPlayStopTimer} />\n                \n      </main>\n</div>\n      );\n    }\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}